{"version":3,"sources":["../../src/decorator/NamingStrategy.ts"],"names":[],"mappings":";;AAAA,kCAAgD;AAGhD;;;;;GAKG;AACH,wBAA+B,IAAa;IACxC,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,YAAY,GAAG,IAAI,GAAG,IAAI,GAAU,MAAO,CAAC,IAAI,CAAC;QACvD,IAAM,IAAI,GAA+B;YACrC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,YAAY;SACrB,CAAC;QACF,8BAAsB,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC;AACN,CAAC;AATD,wCASC","file":"NamingStrategy.js","sourcesContent":["import {getMetadataArgsStorage} from \"../index\";\nimport {NamingStrategyMetadataArgs} from \"../metadata-args/NamingStrategyMetadataArgs\";\n\n/**\n * Decorator registers a new naming strategy to be used in naming things.\n *\n * todo: deprecate using naming strategies this way. use it without decorators\n * todo: but add multiple default naming strategies for use\n */\nexport function NamingStrategy(name?: string): Function {\n    return function (target: Function) {\n        const strategyName = name ? name : (<any> target).name;\n        const args: NamingStrategyMetadataArgs = {\n            target: target,\n            name: strategyName\n        };\n        getMetadataArgsStorage().namingStrategies.add(args);\n    };\n}\n"],"sourceRoot":".."}